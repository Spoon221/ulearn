using System;

namespace GeometryTasks
{
    public class Vector
    {
        public double X;
        public double Y;
    }

    public class Segment
    {
        public Vector Begin;
        public Vector End;
    }

    public class Geometry
    {
        public static double GetLength(Vector vector)
        {
            return Math.Sqrt(vector.X * vector.X + vector.Y * vector.Y);
        }

        public static Vector Add(Vector a, Vector b)
        {
            return new Vector
            {
                X = a.X + b.X,
                Y = a.Y + b.Y
            };
        }

        public static Vector GetSegmentStraightDirectionalVector(Segment s)
        {
            return new Vector
            {
                X = s.End.X - s.Begin.X,
                Y = s.End.Y - s.Begin.Y
            };
        }

        public static double GetLength(Segment segment)
        {
            return GetLength(GetSegmentStraightDirectionalVector(segment));
        }

        public static bool IsVectorInSegment(Vector vector, Segment segment)
        {
            return NumberRealStraightSegment(vector.X, segment.Begin.X, segment.End.X)
                && NumberRealStraightSegment(vector.Y, segment.Begin.Y, segment.End.Y)
                && VectorInSegmentStraight(vector, segment);
        }

        public static bool VectorInSegmentStraight(Vector vector, Segment segment)
        {
            var directionalVector = GetSegmentStraightDirectionalVector(segment);
            return Math.Abs((vector.X - segment.Begin.X) * directionalVector.Y
                - (vector.Y - segment.Begin.Y) * directionalVector.X) < 1e-8;
        }

        private static double GetSquare(double x)
        {
            return x * x;
        }

        private static bool NumberRealStraightSegment(double x, double a, double b)
        {
            return (Math.Min(a, b) <= x) && (x <= Math.Max(a, b));
        }
    }
}